//
// nekRS User Defined File
//

#include <math.h>
#include "udf.hpp"

#include <vector>

static dfloat P_U0;
static dfloat P_V0;
static dfloat P_W0;

static dfloat P_A0;
static dfloat P_D0;

static dfloat P_OMEGA;
static dfloat P_AMP;

occa::kernel dpdxKernel; 
occa::kernel exactUVWPKernel; 
occa::kernel userMeshVelocityKernel;
occa::memory o_x0, o_y0, o_z0;

void userq(nrs_t *nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  mesh_t *mesh = nrs->meshV; 
  cds_t *cds   = nrs->cds; 
  const dlong Nlocal = nrs->meshV->Nelements * nrs->meshV->Np;

  dpdxKernel(Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, 0*cds->fieldOffset[0], o_FS);
  dpdxKernel(Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, 1*cds->fieldOffset[0], o_FS);
}                                                   

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  // called from all ranks, so MPI collectives are O.K.
  int maxRank = platform->comm.mpiRank;
  MPI_Allreduce(MPI_IN_PLACE, &maxRank, 1, MPI_INT, MPI_MAX, platform->comm.mpiComm);

  setupAide &options = platform->options;

  dfloat mue, rho;
  options.getArgs("VISCOSITY", mue);
  options.getArgs("DENSITY", rho); 
  kernelInfo["defines/p_nu"] = mue/rho;
  kernelInfo["defines/p_U0"] = P_U0;
  kernelInfo["defines/p_V0"] = P_V0;
  kernelInfo["defines/p_W0"] = P_W0;
  kernelInfo["defines/p_A"]  = P_A0 * M_PI;
  kernelInfo["defines/p_D"]  = P_D0 * M_PI;
  kernelInfo["defines/p_amp"] = P_AMP;
  kernelInfo["defines/p_omega"] = P_OMEGA;
  kernelInfo["defines/p_pi"] = M_PI;

  dpdxKernel = oudfBuildKernel(kernelInfo, "dpdx");
  exactUVWPKernel = oudfBuildKernel(kernelInfo, "exactUVWP"); 
  userMeshVelocityKernel = oudfBuildKernel(kernelInfo, "userMeshVelocity");
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "p_u0", P_U0);
  platform->par->extract("casedata", "p_v0", P_V0);
  platform->par->extract("casedata", "p_w0", P_W0);
  platform->par->extract("casedata", "p_a0", P_A0);
  platform->par->extract("casedata", "p_d0", P_D0);
  platform->par->extract("casedata", "p_omega", P_OMEGA);
  platform->par->extract("casedata", "p_amp", P_AMP);

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    double* const nek_cb_scnrs = (double*) nek::ptr("cb_scnrs");
    nek_cb_scnrs[0] = P_U0;
    nek_cb_scnrs[1] = P_V0;
    nek_cb_scnrs[2] = P_W0;
    nek_cb_scnrs[3] = P_A0;
    nek_cb_scnrs[4] = P_D0;
    nek_cb_scnrs[5] = P_OMEGA;
    nek_cb_scnrs[6] = P_AMP;
  }
}

void UDF_Setup(nrs_t *nrs)
{
  mesh_t *mesh = nrs->meshV;
  udf.sEqnSource = &userq;
  if(platform->options.compareArgs("MOVING MESH", std::string("TRUE"))) {
    o_x0 = platform->device.malloc(mesh->Nlocal, sizeof(dfloat), mesh->o_x);
    o_y0 = platform->device.malloc(mesh->Nlocal, sizeof(dfloat), mesh->o_y);
    o_z0 = platform->device.malloc(mesh->Nlocal, sizeof(dfloat), mesh->o_z);
  }
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds = nrs->cds;

  if (tstep <= 5) {
    exactUVWPKernel(mesh->Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, nrs->fieldOffset, nrs->o_P, nrs->o_U);
    if (nrs->pSolver) 
      ellipticZeroMean(nrs->pSolver, nrs->o_P);
    if (nrs->Nscalar > 0) 
      cds->o_S.copyFrom(nrs->o_U, mesh->Nlocal*sizeof(dfloat), 0*cds->fieldOffset[0]*sizeof(dfloat));
    if (nrs->Nscalar > 1) 
    cds->o_S.copyFrom(nrs->o_U, mesh->Nlocal*sizeof(dfloat), 1*cds->fieldOffset[0]*sizeof(dfloat));
  }

  if(platform->options.compareArgs("MOVING MESH", std::string("TRUE")))
    userMeshVelocityKernel(
      mesh->Nlocal,
      nrs->fieldOffset,
      time,
      o_x0,
      o_y0,
      o_z0,
      mesh->o_U);

  static bool firstSend = true;
  bool send = tstep > 10;
  if (send && firstSend) {
    firstSend = false;
    // communicate simulation results with coupled session, if applicable
    [&](){
      if(!nrs->multiSession) return;
      if(platform->comm.mpiCommSize > 1) return;
      nrs->o_U.copyTo(nrs->U);

      // field offsets may differ between the simulations, so must ensure
      // that buffer is appropriately sized
      std::vector<dfloat> U(nrs->NVfields * mesh->Nlocal);
      for(int i = 0; i < mesh->Nlocal; ++i){
        U[i + 0 * mesh->Nlocal] = nrs->U[i + 0 * nrs->fieldOffset];
        U[i + 1 * mesh->Nlocal] = nrs->U[i + 1 * nrs->fieldOffset];
        U[i + 2 * mesh->Nlocal] = nrs->U[i + 2 * nrs->fieldOffset];
      }
      
      // send to the other rank
      int globRank;
      MPI_Comm_rank(platform->comm.mpiCommParent, &globRank);
      int otherRank = (globRank + 1) % 2;

      MPI_Request request;
      MPI_Isend((void*) U.data(),
        U.size() * sizeof(dfloat),
        MPI_UNSIGNED_CHAR, 
        otherRank,
        0,
        platform->comm.mpiCommParent,
        &request);
      
      MPI_Wait(&request, MPI_STATUS_IGNORE);

    }();
  }
}
