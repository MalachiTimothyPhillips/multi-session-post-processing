//
// nekRS User Defined File
//

#include <math.h>
#include "udf.hpp"
#include <vector>

static dfloat P_U0;
static dfloat P_V0;
static dfloat P_W0;

static dfloat P_A0;
static dfloat P_D0;

static dfloat P_OMEGA;
static dfloat P_AMP;

void UDF_LoadKernels(occa::properties& kernelInfo)
{
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "p_u0", P_U0);
  platform->par->extract("casedata", "p_v0", P_V0);
  platform->par->extract("casedata", "p_w0", P_W0);
  platform->par->extract("casedata", "p_a0", P_A0);
  platform->par->extract("casedata", "p_d0", P_D0);
  platform->par->extract("casedata", "p_omega", P_OMEGA);
  platform->par->extract("casedata", "p_amp", P_AMP);

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    double* const nek_cb_scnrs = (double*) nek::ptr("cb_scnrs");
    nek_cb_scnrs[0] = P_U0;
    nek_cb_scnrs[1] = P_V0;
    nek_cb_scnrs[2] = P_W0;
    nek_cb_scnrs[3] = P_A0;
    nek_cb_scnrs[4] = P_D0;
    nek_cb_scnrs[5] = P_OMEGA;
    nek_cb_scnrs[6] = P_AMP;
  }
}

void UDF_Setup(nrs_t *nrs)
{
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  static bool first = true;
  if(!first) return;

  first = false;
  auto * mesh = nrs->meshV;

  // send to the other rank
  int globRank;
  MPI_Comm_rank(platform->comm.mpiCommParent, &globRank);
  int otherRank = (globRank + 1) % 2;

  std::vector<dfloat> U(nrs->NVfields * mesh->Nlocal);

  MPI_Request request;
  MPI_Irecv((void*) U.data(),
    U.size() * sizeof(dfloat),
    MPI_UNSIGNED_CHAR, 
    otherRank,
    MPI_ANY_TAG,
    platform->comm.mpiCommParent,
    &request);
  
  // do whatever postprocessing can be done here before receiving the data
  MPI_Wait(&request, MPI_STATUS_IGNORE);

  for(int i = 0; i < mesh->Nlocal; ++i){
    nrs->U[i + 0 * nrs->fieldOffset] = U[i + 0 * mesh->Nlocal];
    nrs->U[i + 1 * nrs->fieldOffset] = U[i + 1 * mesh->Nlocal];
    nrs->U[i + 2 * nrs->fieldOffset] = U[i + 2 * mesh->Nlocal];
  }

  nrs->o_U.copyFrom(nrs->U);

  nek::ocopyToNek(time, tstep);
  nek::userchk();

  // tell other rank to go ahead
  char nothing;
  MPI_Send((void*) &nothing,
    sizeof(char),
    MPI_UNSIGNED_CHAR, 
    otherRank,
    0,
    platform->comm.mpiCommParent);

}
